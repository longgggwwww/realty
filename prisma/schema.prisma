// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Property {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  icon        String

  // Các thuộc tính
  attrs   Attribute[] @relation(fields: [attrIds], references: [id])
  attrIds String[]    @db.ObjectId

  // Các tiện ích
  amenities  Amenity[] @relation(fields: [amenityIds], references: [id])
  amenityIds String[]  @db.ObjectId

  // Các bài đăng sử dụng bds này
  usedByPosts Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("properties") // loại bds
}

model Attribute {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  key         String   @unique
  name        String
  description String?
  sym         String
  icon        String
  filterable  Boolean  @default(false) // trường này có thể filter hay không
  dataType    DataType // kiểu dữ liệu, enum này quy ước với client

  // Các bds sở hữu thuộc tính này
  properties  Property[] @relation(fields: [propertyIds], references: [id])
  propertyIds String[]   @db.ObjectId

  // Các bài đăng sử dụng thuộc tính này
  posts   Post[]   @relation(fields: [postIds], references: [id])
  postIds String[] @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("attributes") // thuộc tính của bds
}

enum DataType {
  MONEY
  TEXT
  NUMBER
  SELECT
  RADIO
  CHECKBOX
  AREA
  SIZE
  BOOL
}

model Amenity {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String @unique @map("name")
  icon  String @map("icon")

  // Loại bds nào mới có tiện ích này
  properties  Property[] @relation(fields: [propertyIds], references: [id])
  propertyIds String[]   @db.ObjectId

  // Bài đăng đã sử dụng tiện ích này
  usedByPosts   Post[]   @relation(fields: [usedByPostIds], references: [id])
  usedByPostIds String[] @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("amenities") // tiện ích của bds
}

model Post {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title String
  price String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId

  // Loại hình bất động sản
  estateType   Property @relation(fields: [estateTypeId], references: [id])
  estateTypeId String   @db.ObjectId

  thumbnail String?
  images    String[]

  saleType String
  status   String
  views    Int    @default(0)
  address  Json

  // Thuộc tính
  properties  Attribute[] @relation(fields: [propertyIds], references: [id])
  propertyIds String[]    @db.ObjectId

  // Tiện ích
  utils   Amenity[] @relation(fields: [utilIds], references: [id])
  utilIds String[]  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("posts")
}

model User {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  profile  Profile?
  disabled Boolean  @default(false) // vô hiệu hóa tài khoản

  // Tài khoản liên kết
  accounts Account[]

  // Vai trò người dùng
  role   Role?   @relation(fields: [roleId], references: [id])
  roleId String? @db.ObjectId

  // Quyền đặc biệt 
  extendPermissions   Permission[] @relation(fields: [extendPermissionIds], references: [id])
  extendPermissionIds String[]     @db.ObjectId

  // Bài viết đã tạo
  posts Post[]

  // Hình thức đăng nhập đã sử dụng
  providers String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

enum Providers {
  phone
  gg
  fb
}

type Profile {
  name          String?
  dob           DateTime?
  gender        Boolean?
  phone         String?
  email         String?
  emailVerified Boolean?
  about         String?
  address       Address?
  avatar        String?
  background    String?
}

type Address {
  provide  String
  district String
  ward     String
}

model Account {
  uid    String @id @map("_id")
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  @@map("accounts")
}

model Role {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  level Int

  permissions   Permission[] @relation(fields: [permissionIds], references: [id])
  permissionIds String[]     @db.ObjectId

  // Hiện tại, user nào đang có role này?
  user User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  AppConfig AppConfig[]

  @@map("roles")
}

model Permission {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  code        String  @unique
  description String?

  // Thuộc group nào
  group   PermissionGroup @relation(fields: [groupId], references: [id])
  groupId String          @db.ObjectId

  // Hiện tại, role nào đang chứa permission này
  roles   Role[]   @relation(fields: [roleIds], references: [id])
  roleIds String[] @db.ObjectId

  // Hiện tại, user nào dùng permission này làm permission đặc biệt
  users   User[]   @relation(fields: [userIds], references: [id])
  userIds String[] @db.ObjectId

  @@map("permissions")
}

// Phân loại quyền hạn
model PermissionGroup {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  permissions Permission[]

  @@map("permission-groups")
}

model Setting {
  id String @id @map("_id") @db.ObjectId
}

model AppConfig {
  id String @id @map("_id") @db.ObjectId

  // Role mặc định sẽ được set cho user mới
  defaultRole Role   @relation(fields: [roleId], references: [id])
  roleId      String @db.ObjectId

  @@map("app-config")
}
