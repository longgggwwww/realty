// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Property {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  icon        String?

  // Tiện ích
  amenities  Amenity[] @relation(fields: [amenityIds], references: [id])
  amenityIds String[]  @db.ObjectId

  // Bài đăng về loại bds này
  posts Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("properties") // loại bds
}

model Amenity {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  key         String
  name        String
  description String?
  icon        String?

  // Bds chứa tiện ích
  properties  Property[] @relation(fields: [propertyIds], references: [id])
  propertyIds String[]   @db.ObjectId

  // Bài đăng chứa tiện ích
  posts   Post[]   @relation(fields: [postIds], references: [id])
  postIds String[] @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("amenities") // tiện ích
}

model Post {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  property    Property   @relation(fields: [propertyId], references: [id])
  propertyId  String     @db.ObjectId
  price       Int
  area        Float
  thumb       String
  images      String[]
  status      PostStatus
  address     Address
  views       Int        @default(0)

  // Tiện ích
  amenities  Amenity[] @relation(fields: [amenityIds], references: [id])
  amenityIds String[]  @db.ObjectId

  // Tác giả của bài viết
  author   User   @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId

  // Người lưu bài viết này
  savedBy    User[]   @relation(name: "save-posts", fields: [savedByIds], references: [id])
  savedByIds String[] @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("posts")
}

enum PostStatus {
  pending
  published
  sold // đã bán
  archived // đã lưu trữ
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  dob           DateTime?
  gender        Boolean?
  phone         String?
  email         String?
  emailVerified Boolean?
  about         String?
  address       Address?
  avatar        String?
  background    String?
  disabled      Boolean?  @default(false) // vô hiệu hóa tài khoản

  // Tài khoản liên kết
  accounts Account[]

  // Vai trò của người dùng
  role   Role?   @relation(fields: [roleId], references: [id])
  roleId String? @db.ObjectId

  // Quyền đặc biệt 
  permissions   Permission[] @relation(fields: [permissionIds], references: [id])
  permissionIds String[]     @db.ObjectId

  // Bài viết đã tạo
  posts Post[]

  // Bài viết đã lưu
  savedPosts  Post[]   @relation(name: "save-posts", fields: [savePostIds], references: [id])
  savePostIds String[] @db.ObjectId

  // Hình thức đăng nhập đã sử dụng
  providers Providers[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

enum Providers {
  phone
  gg
  fb
}

type Address {
  detail     String
  body       Json?
  lng        String
  lat        String
  provinceId String
  districtId String
  wardId     String
}

model Account {
  uid    String @id @map("_id") // uid từ firebase
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  @@map("accounts")
}

model Role {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  level         Int
  description   String?
  permissions   Permission[] @relation(fields: [permissionIds], references: [id])
  permissionIds String[]     @db.ObjectId

  // Người dùng đang sở hữu vai trò này
  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cfg Config[]

  @@map("roles") // vai trò của người dùng
}

model Permission {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  code        String    @unique
  description String?
  group       PermGroup @relation(fields: [groupId], references: [id])
  groupId     String    @db.ObjectId
  roles       Role[]    @relation(fields: [roleIds], references: [id])
  roleIds     String[]  @db.ObjectId
  users       User[]    @relation(fields: [userIds], references: [id])
  userIds     String[]  @db.ObjectId

  @@map("permissions") // quyền hạn
}

model PermGroup {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  permissions Permission[]

  @@map("permission-groups") // nhóm quyền
}

model Config {
  id String @id @map("_id") @db.ObjectId

  // Role mặc định cho user được tạo
  roleDef Role   @relation(fields: [roleId], references: [id])
  roleId  String @db.ObjectId

  carousel Carousel

  @@map("config") // config hệ thống
}

type Carousel {
  slides Slide[]
}

type Slide {
  image   String
  appPaht String
  index   Int
}
