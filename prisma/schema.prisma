// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Property {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  icon        String

  // Thuộc tính
  attrs   Attribute[] @relation(fields: [attrIds], references: [id])
  attrIds String[]    @db.ObjectId

  // Tiện ích
  amenities  Amenity[] @relation(fields: [amenityIds], references: [id])
  amenityIds String[]  @db.ObjectId

  // Bài đăng về loại bds này
  posts Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("properties") // loại bds
}

model Attribute {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  key         String   @unique
  name        String
  description String?
  sym         String
  icon        String
  filterable  Boolean  @default(false) // thuộc tính có thể filter
  dataType    DataType // kiểu dữ liệu đầu vào

  // Loại bds chứa thuộc tính này
  properties  Property[] @relation(fields: [propertyIds], references: [id])
  propertyIds String[]   @db.ObjectId

  // Bài đăng chứa thuộc tính này
  posts   Post[]   @relation(fields: [postIds], references: [id])
  postIds String[] @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("attributes") // thuộc tính của bds
}

enum DataType {
  MONEY
  TEXT
  NUMBER
  SELECT
  RADIO
  CHECKBOX
  AREA
  SIZE
  BOOL
}

model Amenity {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  key         String
  name        String
  description String?
  icon        String

  // Loại bds chứa tiện ích này
  properties  Property[] @relation(fields: [propertyIds], references: [id])
  propertyIds String[]   @db.ObjectId

  // Bài đăng chứa tiện ích này
  posts   Post[]   @relation(fields: [postIds], references: [id])
  postIds String[] @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("amenities") // tiện ích của bds
}

model Post {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title     String
  mode      PostMode // chế độ bài đăng: bán, cho thuê, ...
  price     String
  thumbnail String?
  images    String[]
  status    PostStatus // trạng thái bài đăng: hiển thị, chờ duyệt, đã duyệt, bị từ chối, ...
  views     BigInt?    @default(0)
  address   Json

  // Loại hình bds
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String   @db.ObjectId

  // Thuộc tính
  attrs   Attribute[] @relation(fields: [attrIds], references: [id])
  attrIds String[]    @db.ObjectId

  // Tiện ích
  amenities  Amenity[] @relation(fields: [amenityIds], references: [id])
  amenityIds String[]  @db.ObjectId

  // Tác giả của bài viết
  author   User   @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId

  // Người lưu bài viết này
  savedBy    User[]   @relation(name: "save-posts", fields: [savedByIds], references: [id])
  savedByIds String[] @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("posts")
}

enum PostMode {
  sale // bán
  lease // cho thuê
}

enum PostStatus {
  display
  pending
  accept
  reject
  removed
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  dob           DateTime?
  gender        Boolean?
  phone         String?
  email         String?
  emailVerified Boolean?
  about         String?
  address       Address?
  avatar        String?
  background    String?
  disabled      Boolean?  @default(false) // vô hiệu hóa tài khoản

  // Tài khoản liên kết
  accounts Account[]

  // Vai trò của người dùng
  role   Role?   @relation(fields: [roleId], references: [id])
  roleId String? @db.ObjectId

  // Quyền đặc biệt 
  permissions   Permission[] @relation(fields: [permissionIds], references: [id])
  permissionIds String[]     @db.ObjectId

  // Bài viết đã tạo
  posts Post[]

  // Bài viết đã lưu
  savedPosts  Post[]   @relation(name: "save-posts", fields: [savePostIds], references: [id])
  savePostIds String[] @db.ObjectId

  // Hình thức đăng nhập đã sử dụng
  providers Providers[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

enum Providers {
  phone
  gg
  fb
}

type Address {
  province String
  district String
  ward     String
}

model Account {
  uid    String @id @map("_id") // uid từ firebase
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  @@map("accounts")
}

model Role {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  level       Int
  description String?

  permissions   Permission[] @relation(fields: [permissionIds], references: [id])
  permissionIds String[]     @db.ObjectId

  // Người dùng đang sở hữu vai trò này
  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cfg Config[]

  @@map("roles") // vai trò của người dùng
}

model Permission {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  code        String  @unique
  description String?

  // Thuộc group nào
  group   PermGroup @relation(fields: [groupId], references: [id])
  groupId String    @db.ObjectId

  // Hiện tại, role nào đang chứa permission này
  roles   Role[]   @relation(fields: [roleIds], references: [id])
  roleIds String[] @db.ObjectId

  // Hiện tại, user nào dùng permission này làm permission đặc biệt
  users   User[]   @relation(fields: [userIds], references: [id])
  userIds String[] @db.ObjectId

  @@map("permissions") // quyền hạn
}

model PermGroup {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  permissions Permission[]

  @@map("permission-groups") // nhóm quyền (gom nhóm các quyền hạn có chức năng tương tự)
}

model Config {
  id String @id @map("_id") @db.ObjectId

  // Role mặc định cho user được tạo
  roleDef Role   @relation(fields: [roleId], references: [id])
  roleId  String @db.ObjectId

  @@map("config") // config hệ thống
}
