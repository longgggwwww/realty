// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Property {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  icon        String?
  amenities   Amenity[] @relation(fields: [amenityIds], references: [id])
  amenityIds  String[]  @db.ObjectId // tiện ích
  posts       Post[] // bài đăng sở hữu loại nhà đất này
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("properties") // loại nhà đất
}

model Amenity {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  key         String
  name        String
  description String?
  icon        String?
  properties  Property[] @relation(fields: [propertyIds], references: [id])
  propertyIds String[]   @db.ObjectId // loại nhà đất nào có tiện ích này
  posts       Post[]     @relation(fields: [postIds], references: [id])
  postIds     String[]   @db.ObjectId // bài đăng nào chứa tiện ích này
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("amenities") // tiện ích
}

model Post {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  property    Property   @relation(fields: [propertyId], references: [id])
  propertyId  String     @db.ObjectId // loại
  amenities   Amenity[]  @relation(fields: [amenityIds], references: [id])
  amenityIds  String[]   @db.ObjectId // tiện ích
  price       Int
  area        Float
  thumb       String
  images      String[]
  status      PostStatus @default(Pending)
  address     Address
  views       Int        @default(0)
  author      User       @relation(fields: [authorId], references: [id])
  authorId    String     @db.ObjectId
  savedBy     User[]     @relation(name: "save-posts", fields: [savedByIds], references: [id])
  savedByIds  String[]   @db.ObjectId // lưu bởi ai
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("posts")
}

enum PostStatus {
  Pending
  Published
  Sold // đã bán
  Archived // đã lưu trữ
}

type Address {
  province String
  district String
  ward     String
  detail   String
  lng      Float? // kinh độ
  lat      Float? // vĩ độ
  misc     Json? // nội dung phụ như viewport, ... client sử dụng để lưu trữ
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  dob           DateTime?
  gender        Gender       @default(Other)
  phone         String?
  email         String?
  emailVerified Boolean      @default(false)
  about         String?
  address       Address?
  avatar        String?
  background    String?
  disabled      Boolean      @default(false) // vô hiệu hóa tài khoản
  accounts      Account[]
  posts         Post[] // bài viết đã tạo
  role          Role?        @relation(fields: [roleId], references: [id])
  roleId        String?      @db.ObjectId
  permissions   Permission[] @relation(fields: [permissionIds], references: [id])
  permissionIds String[]     @db.ObjectId // quyền đặc biệt
  savedPosts    Post[]       @relation(name: "save-posts", fields: [savePostIds], references: [id])
  savePostIds   String[]     @db.ObjectId // bài viết đã lưu
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("users")
}

enum Gender {
  Male
  Female
  Other
}

model Account {
  uid      String @id @map("_id") // uid từ firebase
  user     User   @relation(fields: [userId], references: [id])
  userId   String @db.ObjectId
  provider String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("accounts")
}

model Role {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  level         Int
  description   String?
  permissions   Permission[] @relation(fields: [permissionIds], references: [id])
  permissionIds String[]     @db.ObjectId
  users         User[]
  cfg           Setting[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("roles") // vai trò của người dùng
}

model Permission {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  code        String          @unique
  description String?
  group       PermissionGroup @relation(fields: [groupId], references: [id])
  groupId     String          @db.ObjectId
  roles       Role[]          @relation(fields: [roleIds], references: [id])
  roleIds     String[]        @db.ObjectId
  users       User[]          @relation(fields: [userIds], references: [id])
  userIds     String[]        @db.ObjectId

  @@map("permissions") // quyền hạn
}

model PermissionGroup {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  permissions Permission[]

  @@map("permission-groups") // nhóm quyền
}

model Setting {
  id        String   @id @map("_id") @db.ObjectId
  roleDef   Role     @relation(fields: [roleDefId], references: [id])
  roleDefId String   @db.ObjectId // role mặc định dành cho user khi được tạo
  carousel  Carousel

  @@map("settings") // setting hệ thống
}

type Carousel {
  slides Slide[]
}

type Slide {
  image   String
  appPath String
  idx     Int
}
